import Foundation
import NetworkExtension
import Network
import CryptoKit

// –õ–æ–∫–∞–ª—å–Ω—ã–π SOCKS5 –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
class LocalSOCKSProxy {
    private var listener: NWListener?
    private var connections: [NWConnection] = []
    private let vlessClient: VLESSClient
    private let port: UInt16 = 8888
    
    init(vlessClient: VLESSClient) {
        self.vlessClient = vlessClient
    }
    
    func start() async throws {
        let parameters = NWParameters.tcp
        parameters.allowLocalEndpointReuse = true
        
        listener = try NWListener(using: parameters, on: NWEndpoint.Port(rawValue: port)!)
        
        listener?.newConnectionHandler = { [weak self] connection in
            self?.handleNewConnection(connection)
        }
        
        listener?.start(queue: .global())
        print("üîå SOCKS5 –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É \(port)")
    }
    
    private func handleNewConnection(_ connection: NWConnection) {
        connections.append(connection)
        connection.start(queue: .global())
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ SOCKS5 –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        connection.receive(minimumIncompleteLength: 1, maximumLength: 4096) { [weak self] data, _, isComplete, error in
            if let data = data, !data.isEmpty {
                self?.handleSOCKSRequest(connection, data: data)
            }
        }
    }
    
    private func handleSOCKSRequest(_ connection: NWConnection, data: Data) {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è SOCKS5
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SOCKS5 –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        
        Task {
            do {
                // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ VLESS
                let response = try await vlessClient.proxyData(data)
                connection.send(content: response, completion: .contentProcessed { error in
                    if let error = error {
                        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: \(error)")
                    }
                })
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è: \(error)")
            }
        }
    }
    
    func stop() {
        listener?.cancel()
        connections.forEach { $0.cancel() }
        connections.removeAll()
        print("üîå SOCKS5 –ø—Ä–æ–∫—Å–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    }
}

// VLESS –ø—Ä–æ—Ç–æ–∫–æ–ª –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
class VLESSClient {
    private var connection: NWConnection?
    private let serverAddress: String
    private let serverPort: Int
    private let uuid: String
    private let security: String
    private let publicKey: String
    private let shortId: String
    private let serverName: String
    
    init(serverAddress: String, serverPort: Int, uuid: String, security: String = "reality", publicKey: String, shortId: String, serverName: String) {
        self.serverAddress = serverAddress
        self.serverPort = serverPort
        self.uuid = uuid
        self.security = security
        self.publicKey = publicKey
        self.shortId = shortId
        self.serverName = serverName
    }
    
    static func parseVLESSURL(_ vlessURL: String) -> VLESSClient? {
        // –ü–∞—Ä—Å–∏–Ω–≥ VLESS URL
        guard let url = URL(string: vlessURL),
              url.scheme == "vless",
              let host = url.host,
              let port = url.port else {
            return nil
        }
        
        let uuid = url.user ?? ""
        let queryItems = URLComponents(string: vlessURL)?.queryItems
        
        let security = queryItems?.first(where: { $0.name == "security" })?.value ?? "reality"
        let publicKey = queryItems?.first(where: { $0.name == "pbk" })?.value ?? ""
        let shortId = queryItems?.first(where: { $0.name == "sid" })?.value ?? ""
        let serverName = queryItems?.first(where: { $0.name == "sni" })?.value ?? host
        
        return VLESSClient(
            serverAddress: host,
            serverPort: port,
            uuid: uuid,
            security: security,
            publicKey: publicKey,
            shortId: shortId,
            serverName: serverName
        )
    }
    
    func connect() async throws {
        let host = NWEndpoint.Host(serverAddress)
        let port = NWEndpoint.Port(integerLiteral: UInt16(serverPort))
        
        connection = NWConnection(host: host, port: port, using: .tcp)
        
        return try await withCheckedThrowingContinuation { continuation in
            connection?.stateUpdateHandler = { state in
                switch state {
                case .ready:
                    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VLESS —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    continuation.resume()
                case .failed(let error):
                    print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: \(error)")
                    continuation.resume(throwing: error)
                case .cancelled:
                    continuation.resume(throwing: VLESSError.connectionCancelled)
                default:
                    break
                }
            }
            
            connection?.start(queue: .global())
        }
    }
    
    func sendVLESSHandshake() async throws {
        guard let connection = connection else {
            throw VLESSError.notConnected
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ VLESS –∑–∞–ø—Ä–æ—Å–∞
        var data = Data()
        
        // –í–µ—Ä—Å–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (1 –±–∞–π—Ç)
        data.append(0x00)
        
        // UUID (16 –±–∞–π—Ç)
        let uuidData = UUID(uuidString: uuid)?.uuid ?? (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
        data.append(Data([uuidData.0, uuidData.1, uuidData.2, uuidData.3,
                         uuidData.4, uuidData.5, uuidData.6, uuidData.7,
                         uuidData.8, uuidData.9, uuidData.10, uuidData.11,
                         uuidData.12, uuidData.13, uuidData.14, uuidData.15]))
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (1 –±–∞–π—Ç)
        data.append(0x00)
        
        // –ö–æ–º–∞–Ω–¥–∞: TCP (1 –±–∞–π—Ç)
        data.append(0x01)
        
        // –ü–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (2 –±–∞–π—Ç–∞)
        data.append(Data([0x01, 0xBB])) // 443 –ø–æ—Ä—Ç
        
        // –ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        let addressType: UInt8 = 0x02 // Domain
        data.append(addressType)
        let domainData = serverAddress.data(using: .utf8) ?? Data()
        data.append(UInt8(domainData.count))
        data.append(domainData)
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ handshake
        return try await withCheckedThrowingContinuation { continuation in
            connection.send(content: data, completion: .contentProcessed { error in
                if let error = error {
                    continuation.resume(throwing: error)
                } else {
                    print("‚úÖ VLESS handshake –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                    continuation.resume()
                }
            })
        }
    }
    
    func proxyData(_ data: Data) async throws -> Data {
        guard let connection = connection else {
            throw VLESSError.notConnected
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ VLESS —Ç—É–Ω–Ω–µ–ª—å
        return try await withCheckedThrowingContinuation { continuation in
            connection.send(content: data, completion: .contentProcessed { error in
                if let error = error {
                    continuation.resume(throwing: error)
                    return
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
                connection.receive(minimumIncompleteLength: 1, maximumLength: 65536) { responseData, _, isComplete, error in
                    if let error = error {
                        continuation.resume(throwing: error)
                    } else if let responseData = responseData {
                        continuation.resume(returning: responseData)
                    } else {
                        continuation.resume(returning: Data())
                    }
                }
            })
        }
    }
    
    func disconnect() {
        connection?.cancel()
        connection = nil
        print("üîå VLESS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    }
}

enum VLESSError: Error {
    case invalidURL
    case connectionFailed
    case notConnected
    case connectionCancelled
    case handshakeFailed
    
    var localizedDescription: String {
        switch self {
        case .invalidURL:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π VLESS URL"
        case .connectionFailed:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        case .notConnected:
            return "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        case .connectionCancelled:
            return "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        case .handshakeFailed:
            return "–û—à–∏–±–∫–∞ VLESS handshake"
        }
    }
}

class VPNConnectionManager {
    static let shared = VPNConnectionManager()
    private let appGroup = "group.TURBOVPN1.TURBOVPN.shared"
    private var vlessClient: VLESSClient?
    private var socksProxy: LocalSOCKSProxy?
    private var isVPNActive = false
    
    // –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –†–æ—Å—Å–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –æ–±—Ö–æ–¥–∞
    private let blockedDomains = [
        "instagram.com", "*.instagram.com",
        "facebook.com", "*.facebook.com",
        "twitter.com", "*.twitter.com", "x.com", "*.x.com",
        "youtube.com", "*.youtube.com",
        "youtu.be", "*.youtu.be",
        "telegram.org", "*.telegram.org",
        "discord.com", "*.discord.com",
        "linkedin.com", "*.linkedin.com",
        "medium.com", "*.medium.com",
        "pinterest.com", "*.pinterest.com",
        "reddit.com", "*.reddit.com",
        "soundcloud.com", "*.soundcloud.com",
        "twitch.tv", "*.twitch.tv",
        "vimeo.com", "*.vimeo.com"
    ]
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è VPN —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    func startVPNWithBypass(from vlessURL: String) async throws {
        print("üöÄ –ó–∞–ø—É—Å–∫ VPN —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫...")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ VPN –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
        guard !isVPNActive else {
            throw VPNError.alreadyConnected
        }
        
        // –ü–∞—Ä—Å–∏–º VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        guard let client = VLESSClient.parseVLESSURL(vlessURL) else {
            throw VLESSError.invalidURL
        }
        
        vlessClient = client
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VLESS —Å–µ—Ä–≤–µ—Ä—É
        try await client.connect()
        try await client.sendVLESSHandshake()
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π SOCKS5 –ø—Ä–æ–∫—Å–∏
        socksProxy = LocalSOCKSProxy(vlessClient: client)
        try await socksProxy?.start()
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
        try await configureSystemProxy()
        
        isVPNActive = true
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        NotificationCenter.default.post(
            name: .VPNStatusChanged,
            object: true
        )
        
        print("‚úÖ VPN –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –≤–∫–ª—é—á–µ–Ω –¥–ª—è:")
        print("üì± Instagram, YouTube, Facebook, Twitter –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤")
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    private func configureSystemProxy() async throws {
        let manager = NEVPNManager.shared()
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try await manager.loadFromPreferences()
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        let proxySettings = NEProxySettings()
        
        // HTTP –ø—Ä–æ–∫—Å–∏
        proxySettings.httpEnabled = true
        proxySettings.httpServer = NEProxyServer(address: "127.0.0.1", port: 8888)
        
        // HTTPS –ø—Ä–æ–∫—Å–∏
        proxySettings.httpsEnabled = true
        proxySettings.httpsServer = NEProxyServer(address: "127.0.0.1", port: 8888)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
        proxySettings.autoProxyConfigurationEnabled = true
        
        // PAC —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞ —Ç–æ–ª—å–∫–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        let pacScript = generatePACScript()
        proxySettings.proxyAutoConfigurationJavaScript = pacScript
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        manager.protocolConfiguration = createIPSecConfiguration()
        manager.protocolConfiguration?.disconnectOnSleep = false
        
        // –í–∫–ª—é—á–∞–µ–º VPN
        manager.isEnabled = true
        
        try await manager.saveToPreferences()
        try manager.connection.startVPNTunnel()
        
        print("üîß –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PAC —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ —Ç–æ–ª—å–∫–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    private func generatePACScript() -> String {
        let domains = blockedDomains.joined(separator: "\", \"")
        
        return """
        function FindProxyForURL(url, host) {
            var blockedDomains = ["\(domains)"];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–º–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
            for (var i = 0; i < blockedDomains.length; i++) {
                var domain = blockedDomains[i];
                if (domain.startsWith("*.")) {
                    // –ü–æ–¥–¥–æ–º–µ–Ω
                    var baseDomain = domain.substring(2);
                    if (host.endsWith(baseDomain)) {
                        return "SOCKS5 127.0.0.1:8888; DIRECT";
                    }
                } else {
                    // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    if (host === domain) {
                        return "SOCKS5 127.0.0.1:8888; DIRECT";
                    }
                }
            }
            
            // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ - –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            return "DIRECT";
        }
        """
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π IPSec –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è VPN –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    private func createIPSecConfiguration() -> NEVPNProtocolIPSec {
        let ipsec = NEVPNProtocolIPSec()
        ipsec.serverAddress = "127.0.0.1" // –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å
        ipsec.username = "bypass_user"
        ipsec.passwordReference = nil
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        ipsec.localIdentifier = "TURBOVPN_BYPASS"
        ipsec.remoteIdentifier = "BYPASS_SERVER"
        
        return ipsec
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ VPN –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    func stopVPNBypass() async throws {
        print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ VPN —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫...")
        
        guard isVPNActive else {
            throw VPNError.notConnected
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SOCKS5 –ø—Ä–æ–∫—Å–∏
        socksProxy?.stop()
        socksProxy = nil
        
        // –û—Ç–∫–ª—é—á–∞–µ–º VLESS
        vlessClient?.disconnect()
        vlessClient = nil
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π VPN
        let manager = NEVPNManager.shared()
        try await manager.loadFromPreferences()
        manager.connection.stopVPNTunnel()
        
        isVPNActive = false
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        NotificationCenter.default.post(
            name: .VPNStatusChanged,
            object: false
        )
        
        print("‚úÖ VPN –æ—Ç–∫–ª—é—á–µ–Ω. –û–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ VPN
    var vpnStatus: Bool {
        return isVPNActive
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å—Ç–∞—Ä—ã–π)
    func connectDirectVLESS(from vlessURL: String) async throws {
        print("üöÄ Starting direct VLESS connection...")
        
        // ‚ö†Ô∏è –í–ê–ñ–ù–û: –≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VLESS —Å–µ—Ä–≤–µ—Ä—É
        // –≠—Ç–æ –ù–ï –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π VPN —Ç—É–Ω–Ω–µ–ª—å!
        // iOS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä—è–º–æ–π VLESS - —Ç–æ–ª—å–∫–æ IKEv2, IPSec, OpenVPN, WireGuard
        
        // –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ VPN –Ω—É–∂–Ω–æ:
        // 1. Network Extension —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SOCKS5 –ø—Ä–æ–∫—Å–∏
        // 2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è VLESS –≤ WireGuard –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        // 3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Packet Tunnel Provider
        
        guard let client = VLESSClient.parseVLESSURL(vlessURL) else {
            throw VLESSError.invalidURL
        }
        
        vlessClient = client
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
        try await client.connect()
        try await client.sendVLESSHandshake()
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º UI –æ–± "—É—Å–ø–µ—à–Ω–æ–º" –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        NotificationCenter.default.post(
            name: .VLESSConnectionStatusChanged,
            object: true
        )
        
        print("‚úÖ VLESS handshake completed (DEMO MODE)")
        print("‚ö†Ô∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¢—Ä–∞—Ñ–∏–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ù–ï –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —Ç—É–Ω–Ω–µ–ª—å")
    }
    
    func disconnectDirectVLESS() {
        vlessClient?.disconnect()
        vlessClient = nil
        
        NotificationCenter.default.post(
            name: .VLESSConnectionStatusChanged,
            object: false
        )
        
        print("üîå Direct VLESS connection closed")
    }
    
    // –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    func installVPNConfiguration(from vlessURL: String) async throws {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        try await startVPNWithBypass(from: vlessURL)
    }
    
    func removeVPNConfiguration() async throws {
        try await stopVPNBypass()
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    func getVPNStatus() -> Bool {
        return isVPNActive
    }
    
    func observeVPNStatus(completion: @escaping (Bool) -> Void) {
        NotificationCenter.default.addObserver(forName: .VPNStatusChanged, object: nil, queue: .main) { notification in
            if let isConnected = notification.object as? Bool {
                completion(isConnected)
            }
        }
    }
    
    func disconnectVPN() async throws {
        try await stopVPNBypass()
    }
}

enum VPNError: Error {
    case configurationNotFound
    case permissionDenied
    case alreadyConnected
    case notConnected
    case configurationFailed
    case invalidResponse
    case activationFailed(String)
    case serverError
    
    var localizedDescription: String {
        switch self {
        case .configurationNotFound:
            return "VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        case .permissionDenied:
            return "–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ VPN"
        case .alreadyConnected:
            return "VPN —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
        case .notConnected:
            return "VPN –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
                 case .configurationFailed:
             return "–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPN"
         case .invalidResponse:
             return "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
         case .activationFailed(let message):
             return "–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: \(message)"
         case .serverError:
             return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        }
    }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
extension Notification.Name {
    static let VLESSConnectionStatusChanged = Notification.Name("VLESSConnectionStatusChanged")
    static let VPNStatusChanged = Notification.Name("VPNStatusChanged")
}
